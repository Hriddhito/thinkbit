// Global variables
let currentDocumentData = {
  name: '',
  size: '',
  summary: '',
  type: 'Legal Document'
};

// DOM Elements
const docNameEl = document.getElementById('doc-name');
const docMetaEl = document.getElementById('doc-meta');
const summaryTextEl = document.getElementById('summary-text');
const insightsSection = document.getElementById('insights-section');
const docTypeEl = document.getElementById('doc-type');
const readingTimeEl = document.getElementById('reading-time');
const complexityEl = document.getElementById('complexity');

// Initialize page
document.addEventListener('DOMContentLoaded', initializeSummaryPage);

function initializeSummaryPage() {
  // ‚úÖ Load from localStorage instead of URL
  const docName = localStorage.getItem("docName") || "Legal Document";
  const docSize = localStorage.getItem("docSize") || "Unknown size";
  const summary = localStorage.getItem("docSummary") || "";

  currentDocumentData.name = docName;
  currentDocumentData.size = docSize;
  currentDocumentData.summary = summary;

  updateDocumentInfo();

  if (summary) {
    displaySummary(summary);
  } else {
    setTimeout(() => {
      displayError();
    }, 2000);
  }
}

function updateDocumentInfo() {
  docNameEl.textContent = currentDocumentData.name;
  docMetaEl.innerHTML = `
    <div>${currentDocumentData.size} ‚Ä¢ Processed ${new Date().toLocaleString()}</div>
  `;
}

function displaySummary(summaryText) {
  // Convert **bold** to <strong> and line breaks to <br>
  const formattedSummary = summaryText
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // bold
    .replace(/\n/g, '<br>'); // line breaks

  summaryTextEl.innerHTML = `
    <div class="summary-text-content">${formattedSummary}</div>
  `;
  
  // Show insights
  setTimeout(() => {
    showInsights(summaryText);
    insightsSection.style.display = 'block';
    insightsSection.style.animation = 'fadeIn 0.6s ease';
  }, 500);
}

function showInsights(summaryText) {
  const wordCount = summaryText.split(' ').length;
  const readingTime = Math.max(1, Math.ceil(wordCount / 200));

  const lowerText = summaryText.toLowerCase();
  let docType = 'Legal Document';
  if (lowerText.includes('contract') || lowerText.includes('agreement')) docType = 'Contract/Agreement';
  else if (lowerText.includes('lease') || lowerText.includes('rental')) docType = 'Lease Agreement';
  else if (lowerText.includes('policy') || lowerText.includes('terms')) docType = 'Policy Document';
  else if (lowerText.includes('will') || lowerText.includes('testament')) docType = 'Legal Will';

  let complexity = 'Simplified';
  if (summaryText.length > 2000) complexity = 'Moderate';
  if (summaryText.length > 5000) complexity = 'Complex';

  docTypeEl.textContent = docType;
  readingTimeEl.textContent = `~${readingTime} minute${readingTime > 1 ? 's' : ''}`;
  complexityEl.textContent = complexity;
}

function displayError() {
  summaryTextEl.innerHTML = `
    <div style="text-align: center; padding: 40px; color: #ef4444;">
      <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
      <h3>Unable to load summary</h3>
      <p>There was an issue loading your document summary. Please try analyzing your document again.</p>
      <button class="btn btn-primary" onclick="analyzeAnother()" style="margin-top: 20px;">
        üîÑ Try Again
      </button>
    </div>
  `;
}

function downloadSummary() {
  const summaryContent = `DOCUMENT ANALYSIS SUMMARY
Generated by LegalEase AI
${new Date().toLocaleDateString()}

Document: ${currentDocumentData.name}
Size: ${currentDocumentData.size}

SUMMARY:
${currentDocumentData.summary}

---
This summary was generated using AI and should be reviewed by a legal professional.
  `.trim();

  const blob = new Blob([summaryContent], { type: 'text/plain' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${currentDocumentData.name.replace(/\.[^/.]+$/, '')}_summary.txt`;
  document.body.appendChild(a);
  a.click();
  window.URL.revokeObjectURL(url);
  document.body.removeChild(a);
  
  showNotification('‚úÖ Summary downloaded successfully!', 'success');
}

function shareSummary() {
  if (navigator.share) {
    navigator.share({
      title: 'Document Analysis Summary',
      text: `Summary of ${currentDocumentData.name}:\n\n${currentDocumentData.summary.substring(0, 200)}...`,
      url: window.location.href
    }).catch(() => {
      fallbackShare();
    });
  } else {
    fallbackShare();
  }
}

function fallbackShare() {
  const shareText = `Document Analysis Summary\n\n${currentDocumentData.summary}`;
  if (navigator.clipboard) {
    navigator.clipboard.writeText(shareText).then(() => {
      showNotification('üìã Summary copied to clipboard!', 'info');
    });
  }
}

function analyzeAnother() {
  window.location.href = '/upload';
}

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div style="
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
      color: white;
      padding: 15px 20px;
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.2);
      z-index: 1000;
      font-weight: 600;
      animation: slideInRight 0.3s ease;
    ">
      ${message}
    </div>
  `;
  document.body.appendChild(notification);
  setTimeout(() => { if (notification.parentNode) document.body.removeChild(notification); }, 3000);
}
